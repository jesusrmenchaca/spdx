#!/usr/bin/python3
# SPDX-License-Identifier: Apache-2.0

import os
import re

SLUG = re.compile('[- a-zA-Z0-9.]+')
SPDX = re.compile(rf'SPDX-License-Identifier:\s+({SLUG.pattern})')
CRIGHT = re.compile(rf'Copyright (?:\([Cc]\))?\s+[0-9-]+\s+([a-zA-Z0-9\s,/&]+).?')

class Language:
    def __init__(self, *comments, shebang=False):
        assert(isinstance(shebang, bool))
        self.__shebang = shebang

        self.__match_license = []
        self.__match_copyright = []
        for comment in comments:
            (init, fini) = (comment, '')
            if isinstance(comment, tuple):
                (init, fini) = comment

            pattern = rf"^{init}\s*{SPDX.pattern}\s*{fini}\s*$"
            self.__match_license.append(re.compile(pattern))

            pattern = rf"^{init}\s*{CRIGHT.pattern}\s*{fini}\s*$"
            self.__match_copyright.append(re.compile(pattern))

    def license_copyright(self, path):
        "Find the license from the SPDX header."
        res = [None, None]
        matched_license = matched_copyright = False
        with open(path) as f:
            lines = f.readlines()
            for line in lines:
                if matched_license and matched_copyright:
                    break
                if not matched_license:
                    for matcher in self.__match_license:
                        match = matcher.match(line)
                        if match:
                            res[0] = match.group(1)
                            matched_license = True
                            break
                if not matched_copyright:
                    for matcher in self.__match_copyright:
                        match = matcher.match(line)
                        if match:
                            res[1] = match.group(1)
                            matched_copyright = True
                            break

        return res

class Index:
    INTERPRETERS = {
        'python3': 'python',
        'python2': 'python',
        'python': 'python',
        'ruby': 'ruby',
        'tsm': 'typescript',
        'sh': 'sh',
    }

    EXTENSIONS = {
        '.py': 'python',
        '.proto': 'protobuf',
        '.rs': 'rust',
        '.yml': 'yaml',
        '.yaml': 'yaml',
        '.json': 'json',
        '.toml': 'toml',
        '.md': 'md',
        '.rb': 'ruby',
        '.c': 'c',
        '.h': 'c',
        '.cpp': 'c++',
        '.hpp': 'c++',
        '.cc': 'c++',
        '.hh': 'c++',
        '.cu': 'cuda-c',
        '.cuh': 'cuda-c',
        '.td': 'tablegen',
        '.ts': 'typescript',
        '.sh': 'shell',
    }

    def __init__(self, ignore = None):
        self.__languages = {
            'python': Language('#+', shebang=True),
            'ruby': Language('#+', shebang=True),
            'c': Language('//+', ('/\\*', '\\*/')),
            'c++': Language('//+', ('/\\*', '\\*/')),
            'cuda-c': Language('//+', ('/\\*', '\\*/')),
            'rust': Language('//+', '//!', ('/\\*', '\\*/')),
            'protobuf': Language('//+', '//!', ('/\\*', '\\*/')),
            'tablegen': Language('//+'),
            'typescript': Language('//+', ('/\\*', '\\*/'), shebang=True),
            'shell': Language('#+', shebang=True),
        }
        self.__ignore_dirs = [ ".git" ]
        if ignore:
            self.__ignore_dirs.extend(ignore)

    def language(self, path):
        name = self.EXTENSIONS.get(os.path.splitext(path)[1])
        if name is None:
            interpreter = None
            with open(path, "rb") as f:
                if f.read(2) == bytearray('#!'.encode('ascii')):
                    # assume a text file and retry as text file
                    try:
                        with open(path, "r") as t:
                            interpreter = t.readline().rstrip().rsplit(os.path.sep)[-1]
                    except:
                        pass
            name = self.INTERPRETERS.get(interpreter)
        return self.__languages.get(name)

    def scan_file(self, file):
        language = self.language(file)
        if language is None:
            return None, None
        # Parse the SPDX header for the language.
        return language.license_copyright(file)

    def scan(self, root):

        for root, dirs, files in os.walk(root):
            # Ignore the specified directories.
            dirs[:] = [d for d in dirs if d not in self.__ignore_dirs]

            for file in files:
                path = os.path.join(root, file)
                
                # If the file is a symlink, don't bother
                if os.path.islink( path ):
                    continue
                # If the file is empty skip. 
                if os.path.getsize(path) == 0:
                    continue
                # Find the language of the file.
                language = self.language(path)
                if language is None:
                    continue

                # Parse the SPDX header for the language.
                yield (path, language.license_copyright(path))

def check_license(license, valid_licenses, path):
    if license not in valid_licenses:
        if license is None:
            print(f"NO SPDX {path}")
        else:
            print(f"{license:16} {path} not in {valid_licenses}")
        return 1
    return 0

def check_copyright(copyright, valid_holders, path):
    # Can't check unless we have valid holders.
    if not valid_holders:
        return 0
    if copyright not in valid_holders:
        if copyright is None:
            print(f"NO Copyright! {path}")
        else:
            print(f"Unexpected Copyright holder {copyright:16} {path} not in {valid_holders}")
        return 1
    return 0

if __name__ == '__main__':
    import sys
    import json

    # Get arguments thru environment
    ignore = os.getenv('IGNORE_DIRS')
    licenses = os.getenv('INPUT_LICENSES')
    copyright_holders = os.getenv('COPYRIGHT_HOLDERS')
    # Load + Validate the arguments
    if copyright_holders:
        copyright_holders = json.load(copyright_holders)
    if ignore:
        ignore = json.load(ignore)
    if licenses is None:
        licenses = sys.argv[1:]
    else:
        licenses = json.loads(licenses)
    for license in licenses:
        if not SLUG.match(license):
            print("Invalid license '%s'!" % license)
            raise SystemExit(1)

    rv = 0

    index = Index(ignore=ignore)
    path_to_scan = '.'
    if sys.argv[1:]:
        path_to_scan = sys.argv[1:][-1]
    if os.path.isdir(path_to_scan):
        for (path, license) in index.scan(path_to_scan):
            rv |= check_license(license, licenses, path)
            rv |= check_copyright(copyright, copyright_holders, path)
    elif os.path.isfile(path_to_scan):
        license, copyright = index.scan_file(path_to_scan)
        rv |= check_license(license, licenses, path_to_scan)
        rv |= check_copyright(copyright, copyright_holders, path_to_scan)

    raise SystemExit(rv)
